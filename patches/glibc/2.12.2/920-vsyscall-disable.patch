diff -ru glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S
--- glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S	2018-01-19 04:50:58.025946996 -0800
@@ -1,4 +1,4 @@
-/* Copyright (C) 2002-2006, 2007, 2009, 2010 Free Software Foundation, Inc.
+/* Copyright (C) 2002-2007, 2009, 2010, 2011 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
    Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
 
@@ -68,10 +68,6 @@
 #endif
 
 
-/* For the calculation see asm/vsyscall.h.  */
-#define VSYSCALL_ADDR_vgettimeofday	0xffffffffff600000
-
-
 	.globl	__lll_lock_wait_private
 	.type	__lll_lock_wait_private,@function
 	.hidden	__lll_lock_wait_private
@@ -250,10 +246,9 @@
 	/* Get current time.  */
 	movq	%rsp, %rdi
 	xorl	%esi, %esi
-	movq	$VSYSCALL_ADDR_vgettimeofday, %rax
-	/* This is a regular function call, all caller-save registers
-	   might be clobbered.  */
-	callq	*%rax
+	/* This call works because we directly jump to a system call entry
+	   which preserves all the registers.  */
+	call	JUMPTARGET(__gettimeofday)
 
 	/* Compute relative timeout.  */
 	movq	8(%rsp), %rax
@@ -402,8 +397,9 @@
 	/* Get current time.  */
 2:	movq	%rsp, %rdi
 	xorl	%esi, %esi
-	movq	$VSYSCALL_ADDR_vgettimeofday, %rax
-	callq	*%rax
+	/* This call works because we directly jump to a system call entry
+	   which preserves all the registers.  */
+	call	JUMPTARGET(__gettimeofday)
 
 	/* Compute relative timeout.  */
 	movq	8(%rsp), %rax
diff -ru glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S
--- glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/lowlevelrobustlock.S	2018-01-19 04:50:58.029946951 -0800
@@ -1,4 +1,4 @@
-/* Copyright (C) 2002=2007, 2009, 2010 Free Software Foundation, Inc.
+/* Copyright (C) 2002, 2011=2007, 2009, 2010 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
    Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
 
@@ -50,9 +50,6 @@
 	orl	$FUTEX_WAIT_BITSET | FUTEX_CLOCK_REALTIME, reg
 #endif
 
-/* For the calculation see asm/vsyscall.h.  */
-#define VSYSCALL_ADDR_vgettimeofday	0xffffffffff600000
-
 
 	.globl	__lll_robust_lock_wait
 	.type	__lll_robust_lock_wait,@function
@@ -219,10 +216,9 @@
 	/* Get current time.  */
 	movq	%rsp, %rdi
 	xorl	%esi, %esi
-	movq	$VSYSCALL_ADDR_vgettimeofday, %rax
-	/* This is a regular function call, all caller-save registers
-	   might be clobbered.  */
-	callq	*%rax
+	/* This call works because we directly jump to a system call entry
+	   which preserves all the registers.  */
+	call	JUMPTARGET(__gettimeofday)
 
 	/* Compute relative timeout.  */
 	movq	8(%rsp), %rax
diff -ru glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S
--- glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_timedwait.S	2018-01-19 04:50:58.029946951 -0800
@@ -26,9 +26,6 @@
 
 #include <kernel-features.h>
 
-/* For the calculation see asm/vsyscall.h.  */
-#define VSYSCALL_ADDR_vgettimeofday	0xffffffffff600000
-
 
 	.text
 
@@ -453,13 +450,11 @@
 	movq	__vdso_clock_gettime@GOTPCREL(%rip), %rax
 	movq	(%rax), %rax
 	PTR_DEMANGLE (%rax)
-	jz	26f
 	call	*%rax
-	jmp	27f
-#  endif
-26:	movl	$__NR_clock_gettime, %eax
+#  else
+	movl	$__NR_clock_gettime, %eax
 	syscall
-27:
+#  endif
 #  ifndef __ASSUME_POSIX_TIMERS
 	cmpq	$-ENOSYS, %rax
 	je	19f
@@ -473,8 +468,9 @@
 # else
 	leaq	24(%rsp), %rdi
 	xorl	%esi, %esi
-	movq	$VSYSCALL_ADDR_vgettimeofday, %rax
-	callq	*%rax
+	/* This call works because we directly jump to a system call entry
+	   which preserves all the registers.  */
+	call	JUMPTARGET(__gettimeofday)
 
 	/* Compute relative timeout.  */
 	movq	40(%rsp), %rax
@@ -611,8 +607,9 @@
 	/* clock_gettime not available.  */
 19:	leaq	32(%rsp), %rdi
 	xorl	%esi, %esi
-	movq	$VSYSCALL_ADDR_vgettimeofday, %rax
-	callq	*%rax
+	/* This call works because we directly jump to a system call entry
+	   which preserves all the registers.  */
+	call	JUMPTARGET(__gettimeofday)
 
 	/* Compute relative timeout.  */
 	movq	40(%rsp), %rax
diff -ru glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedrdlock.S glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedrdlock.S
--- glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedrdlock.S	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedrdlock.S	2018-01-19 04:50:58.029946951 -0800
@@ -1,4 +1,4 @@
-/* Copyright (C) 2002-2005, 2007, 2009, 2010 Free Software Foundation, Inc.
+/* Copyright (C) 2002-2005,2007,2009,2010,2011 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
    Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
 
@@ -23,10 +23,6 @@
 #include <pthread-errnos.h>
 #include <kernel-features.h>
 
-
-/* For the calculation see asm/vsyscall.h.  */
-#define VSYSCALL_ADDR_vgettimeofday	0xffffffffff600000
-
 	.text
 
 	.globl	pthread_rwlock_timedrdlock
@@ -123,8 +119,9 @@
 	/* Get current time.  */
 	movq	%rsp, %rdi
 	xorl	%esi, %esi
-	movq	$VSYSCALL_ADDR_vgettimeofday, %rax
-	callq	*%rax
+	/* This call works because we directly jump to a system call entry
+	   which preserves all the registers.  */
+	call	JUMPTARGET(__gettimeofday)
 
 	/* Compute relative timeout.  */
 	movq	8(%rsp), %rax
diff -ru glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedwrlock.S glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedwrlock.S
--- glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedwrlock.S	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/pthread_rwlock_timedwrlock.S	2018-01-19 04:50:58.029946951 -0800
@@ -1,4 +1,5 @@
-/* Copyright (C) 2002, 2003, 2005, 2007, 2009, 2010 Free Software Foundation, Inc.
+/* Copyright (C) 2002, 2003, 2005, 2007, 2009, 2010, 2011
+   Free Software Foundation, Inc.
    This file is part of the GNU C Library.
    Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
 
@@ -23,10 +24,6 @@
 #include <pthread-errnos.h>
 #include <kernel-features.h>
 
-
-/* For the calculation see asm/vsyscall.h.  */
-#define VSYSCALL_ADDR_vgettimeofday	0xffffffffff600000
-
 	.text
 
 	.globl	pthread_rwlock_timedwrlock
@@ -120,8 +117,9 @@
 	/* Get current time.  */
 	movq	%rsp, %rdi
 	xorl	%esi, %esi
-	movq	$VSYSCALL_ADDR_vgettimeofday, %rax
-	callq	*%rax
+	/* This call works because we directly jump to a system call entry
+	   which preserves all the registers.  */
+	call	JUMPTARGET(__gettimeofday)
 
 	/* Compute relative timeout.  */
 	movq	8(%rsp), %rax
diff -ru glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/sem_timedwait.S glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/sem_timedwait.S
--- glibc-2.12.2.orig/nptl/sysdeps/unix/sysv/linux/x86_64/sem_timedwait.S	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/nptl/sysdeps/unix/sysv/linux/x86_64/sem_timedwait.S	2018-01-19 04:49:29.850978304 -0800
@@ -1,4 +1,4 @@
-/* Copyright (C) 2002,2003,2005,2007,2009,2010 Free Software Foundation, Inc.
+/* Copyright (C) 2002,2003,2005,2007,2009,2010,2011 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
    Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
 
@@ -24,10 +24,6 @@
 #include <pthread-errnos.h>
 #include <structsem.h>
 
-
-/* For the calculation see asm/vsyscall.h.  */
-#define VSYSCALL_ADDR_vgettimeofday	0xffffffffff600000
-
 	.text
 
 	.globl	sem_timedwait
@@ -212,9 +208,10 @@
 	addq	$1, NWAITERS(%r12)
 
 7:	xorl	%esi, %esi
-	movq	%rsp, %rdi
-	movq	$VSYSCALL_ADDR_vgettimeofday, %rax
-	callq	*%rax
+	movq	%rsp,%rdi
+	/* This call works because we directly jump to a system call entry
+	   which preserves all the registers.  */
+	call	JUMPTARGET(__gettimeofday)
 
 	/* Compute relative timeout.  */
 	movq	8(%rsp), %rax
diff -ru glibc-2.12.2.orig/sysdeps/unix/clock_gettime.c glibc-2.12.2/sysdeps/unix/clock_gettime.c
--- glibc-2.12.2.orig/sysdeps/unix/clock_gettime.c	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/sysdeps/unix/clock_gettime.c	2018-01-19 04:47:31.340364250 -0800
@@ -1,5 +1,5 @@
 /* clock_gettime -- Get the current time from a POSIX clockid_t.  Unix version.
-   Copyright (C) 1999-2004, 2005, 2007 Free Software Foundation, Inc.
+   Copyright (C) 1999-2004, 2005, 2007, 2011 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -113,7 +113,7 @@
 
     default:
 #ifdef SYSDEP_GETTIME_CPU
-      SYSDEP_GETTIME_CPU;
+      retval = SYSDEP_GETTIME_CPU (clock_id, tp);
 #endif
 #if HP_TIMING_AVAIL
       if ((clock_id & ((1 << CLOCK_IDFIELD_SIZE) - 1))
diff -ru glibc-2.12.2.orig/sysdeps/unix/sysv/linux/clock_gettime.c glibc-2.12.2/sysdeps/unix/sysv/linux/clock_gettime.c
--- glibc-2.12.2.orig/sysdeps/unix/sysv/linux/clock_gettime.c	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/sysdeps/unix/sysv/linux/clock_gettime.c	2018-01-19 05:34:46.363183125 -0800
@@ -1,5 +1,5 @@
 /* clock_gettime -- Get current time from a POSIX clockid_t.  Linux version.
-   Copyright (C) 2003,2004,2005,2006,2007,2010 Free Software Foundation, Inc.
+   Copyright (C) 2003,2004,2005,2006,2007,2010,2011 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -23,18 +23,7 @@
 #include "kernel-posix-cpu-timers.h"
 #include <kernel-features.h>
 
-#ifndef HAVE_CLOCK_GETTIME_VSYSCALL
-# undef INTERNAL_VSYSCALL
-# define INTERNAL_VSYSCALL INTERNAL_SYSCALL
-# undef INLINE_VSYSCALL
-# define INLINE_VSYSCALL INLINE_SYSCALL
-#else
-# include <bits/libc-vdso.h>
-#endif
-
-#define SYSCALL_GETTIME \
-  retval = INLINE_VSYSCALL (clock_gettime, 2, clock_id, tp); \
-  break
+#include <bits/libc-vdso.h>
 
 #ifdef __ASSUME_POSIX_TIMERS
 
@@ -44,7 +33,8 @@
   SYSDEP_GETTIME_CPUTIME						      \
   case CLOCK_REALTIME:							      \
   case CLOCK_MONOTONIC:							      \
-    SYSCALL_GETTIME
+    retval = SYSCALL_GETTIME (clock_id, tp);				      \
+    break
 
 # define __libc_missing_posix_timers 0
 #elif defined __NR_clock_gettime
@@ -59,7 +49,7 @@
   if (!__libc_missing_posix_timers)
     {
       INTERNAL_SYSCALL_DECL (err);
-      int r = INTERNAL_VSYSCALL (clock_gettime, err, 2, clock_id, tp);
+      int r = INTERNAL_GETTIME (clock_id, tp);
       if (!INTERNAL_SYSCALL_ERROR_P (r, err))
 	return 0;
 
@@ -89,7 +79,7 @@
     /* Fallback code.  */						      \
     if (retval == EINVAL && clock_id == CLOCK_REALTIME)			      \
       retval = realtime_gettime (tp);					      \
-    else 								      \
+    else								      \
       {									      \
 	__set_errno (retval);						      \
 	retval = -1;							      \
@@ -119,7 +109,7 @@
   if (!__libc_missing_posix_cpu_timers)
     {
       INTERNAL_SYSCALL_DECL (err);
-      int r = INTERNAL_VSYSCALL (clock_gettime, err, 2, clock_id, tp);
+      int r = INTERNAL_GETTIME (clock_id, tp);
       if (!INTERNAL_SYSCALL_ERROR_P (r, err))
 	return 0;
 
@@ -136,19 +126,11 @@
 	{
 	  if (e == EINVAL)
 	    {
-# ifdef HAVE_CLOCK_GETRES_VSYSCALL
-	      /* Check whether the kernel supports CPU clocks at all.
-		 If not, record it for the future.  */
-	      r = INTERNAL_VSYSCALL (clock_getres, err, 2,
-				     MAKE_PROCESS_CPUCLOCK (0, CPUCLOCK_SCHED),
-				     NULL);
-# else
 	      /* Check whether the kernel supports CPU clocks at all.
 		 If not, record it for the future.  */
 	      r = INTERNAL_SYSCALL (clock_getres, err, 2,
 				    MAKE_PROCESS_CPUCLOCK (0, CPUCLOCK_SCHED),
 				    NULL);
-# endif
 	      if (INTERNAL_SYSCALL_ERROR_P (r, err))
 		__libc_missing_posix_cpu_timers = 1;
 	    }
Only in glibc-2.12.2/sysdeps/unix/sysv/linux: .clock_gettime.c.swp
diff -ru glibc-2.12.2.orig/sysdeps/unix/sysv/linux/kernel-features.h glibc-2.12.2/sysdeps/unix/sysv/linux/kernel-features.h
--- glibc-2.12.2.orig/sysdeps/unix/sysv/linux/kernel-features.h	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/sysdeps/unix/sysv/linux/kernel-features.h	2018-01-19 01:59:47.510532500 -0800
@@ -530,3 +530,8 @@
 #if __LINUX_KERNEL_VERSION >= 0x020621
 # define __ASSUME_RECVMMSG	1
 #endif
+
+/* getcpu is a syscall for x86-64 since 3.1.  */
+#if defined __x86_64__ && __LINUX_KERNEL_VERSION >= 0x030100
+# define __ASSUME_GETCPU_SYSCALL	1
+#endif
Only in glibc-2.12.2/sysdeps/unix/sysv/linux: kernel-features.h.orig
diff -ru glibc-2.12.2.orig/sysdeps/unix/sysv/linux/x86_64/bits/libc-vdso.h glibc-2.12.2/sysdeps/unix/sysv/linux/x86_64/bits/libc-vdso.h
--- glibc-2.12.2.orig/sysdeps/unix/sysv/linux/x86_64/bits/libc-vdso.h	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/sysdeps/unix/sysv/linux/x86_64/bits/libc-vdso.h	2018-01-19 01:58:30.235445620 -0800
@@ -1,5 +1,5 @@
 /* Resolve function pointers to VDSO functions.
-   Copyright (C) 2005, 2007 Free Software Foundation, Inc.
+   Copyright (C) 2005, 2007, 2011 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -25,9 +25,6 @@
 
 #ifdef SHARED
 
-extern long int (*__vdso_gettimeofday) (struct timeval *, void *)
-  attribute_hidden;
-
 extern long int (*__vdso_clock_gettime) (clockid_t, struct timespec *);
 
 #endif
Only in glibc-2.12.2/sysdeps/unix/sysv/linux/x86_64: clock_gettime.c
Only in glibc-2.12.2.orig/sysdeps/unix/sysv/linux/x86_64: gettimeofday.S
diff -ru glibc-2.12.2.orig/sysdeps/unix/sysv/linux/x86_64/init-first.c glibc-2.12.2/sysdeps/unix/sysv/linux/x86_64/init-first.c
--- glibc-2.12.2.orig/sysdeps/unix/sysv/linux/x86_64/init-first.c	2010-12-13 02:47:26.000000000 -0800
+++ glibc-2.12.2/sysdeps/unix/sysv/linux/x86_64/init-first.c	2018-01-19 05:25:59.461349284 -0800
@@ -1,4 +1,4 @@
-/* Copyright (C) 2007 Free Software Foundation, Inc.
+/* Copyright (C) 2007, 2011 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -20,29 +20,25 @@
 # include <dl-vdso.h>
 # include <bits/libc-vdso.h>
 
-long int (*__vdso_gettimeofday) (struct timeval *, void *) attribute_hidden;
-
 long int (*__vdso_clock_gettime) (clockid_t, struct timespec *)
   __attribute__ ((nocommon));
 strong_alias (__vdso_clock_gettime, __GI___vdso_clock_gettime attribute_hidden)
 
+long int (*__vdso_getcpu) (unsigned *, unsigned *, void *) attribute_hidden;
+
 
 static inline void
 _libc_vdso_platform_setup (void)
 {
   PREPARE_VERSION (linux26, "LINUX_2.6", 61765110);
 
-  void *p = _dl_vdso_vsym ("gettimeofday", &linux26);
-  /* If the vDSO is not available we fall back on the old vsyscall.  */
-#define VSYSCALL_ADDR_vgettimeofday	0xffffffffff600000ul
-  if (p == NULL)
-    p = (void *) VSYSCALL_ADDR_vgettimeofday;
+  void *p = _dl_vdso_vsym ("clock_gettime", &linux26);
   PTR_MANGLE (p);
-  __vdso_gettimeofday = p;
+  __GI___vdso_clock_gettime = p;
 
-  p = _dl_vdso_vsym ("clock_gettime", &linux26);
+  p = _dl_vdso_vsym ("getcpu", &linux26);
   PTR_MANGLE (p);
-  __GI___vdso_clock_gettime = p;
+  __vdso_getcpu = p;
 }
 
 # define VDSO_SETUP _libc_vdso_platform_setup
Only in glibc-2.12.2/sysdeps/unix/sysv/linux/x86_64: .init-first.c.swp
Only in glibc-2.12.2.orig/sysdeps/unix/sysv/linux/x86_64: sched_getcpu.S
diff -ru glibc-2.12.2.orig/sysdeps/unix/sysv/linux/x86_64/sysdep.h glibc-2.12.2/sysdeps/unix/sysv/linux/x86_64/sysdep.h
--- glibc-2.12.2.orig/sysdeps/unix/sysv/linux/x86_64/sysdep.h	2018-01-18 21:54:36.956277121 -0800
+++ glibc-2.12.2/sysdeps/unix/sysv/linux/x86_64/sysdep.h	2018-01-19 04:47:31.340364250 -0800
@@ -1,4 +1,4 @@
-/* Copyright (C) 2001-2005, 2007 Free Software Foundation, Inc.
+/* Copyright (C) 2001-2005, 2007, 2011 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -279,8 +279,8 @@
     if (INTERNAL_SYSCALL_ERROR_P (sc_ret, sc_err))			      \
       {									      \
       iserr:								      \
-        __set_errno (INTERNAL_SYSCALL_ERRNO (sc_ret, sc_err));		      \
-        sc_ret = -1L;							      \
+	__set_errno (INTERNAL_SYSCALL_ERRNO (sc_ret, sc_err));		      \
+	sc_ret = -1L;							      \
       }									      \
   out:									      \
     sc_ret;								      \
@@ -304,9 +304,6 @@
     v_ret;								      \
   })
 
-/* List of system calls which are supported as vsyscalls.  */
-#  define HAVE_CLOCK_GETTIME_VSYSCALL	1
-
 # else
 #  define INLINE_VSYSCALL(name, nr, args...) \
   INLINE_SYSCALL (name, nr, ##args)
Only in glibc-2.12.2.orig/sysdeps/unix/sysv/linux/x86_64: time.S
